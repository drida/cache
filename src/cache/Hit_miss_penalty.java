/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package cache;


import javax.swing.JOptionPane;

/**
 *
 * @author marco
 */
public class Hit_miss_penalty extends javax.swing.JFrame {

 
    
     /* Creates new form Hit_miss_penalty
     */
    public Hit_miss_penalty() {
        initComponents();
        setLocationRelativeTo(null);
         
         
        
        
                 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entrada01 = new javax.swing.JTextField();
        entrada02 = new javax.swing.JTextField();
        entrada03 = new javax.swing.JTextField();
        entrada04 = new javax.swing.JTextField();
        entrada05 = new javax.swing.JTextField();
        entrada06 = new javax.swing.JTextField();
        entrada07 = new javax.swing.JTextField();
        entrada08 = new javax.swing.JTextField();
        entrada09 = new javax.swing.JTextField();
        entrada10 = new javax.swing.JTextField();
        entrada11 = new javax.swing.JTextField();
        entrada12 = new javax.swing.JTextField();
        entrada13 = new javax.swing.JTextField();
        entrada14 = new javax.swing.JTextField();
        entrada15 = new javax.swing.JTextField();
        entrada16 = new javax.swing.JTextField();
        titulo1 = new javax.swing.JLabel();
        titulo2 = new javax.swing.JLabel();
        verifica = new javax.swing.JButton();
        cbxacesso = new javax.swing.JComboBox();
        hm1 = new javax.swing.JLabel();
        hm2 = new javax.swing.JLabel();
        hm3 = new javax.swing.JLabel();
        hm4 = new javax.swing.JLabel();
        hm5 = new javax.swing.JLabel();
        hm6 = new javax.swing.JLabel();
        hm7 = new javax.swing.JLabel();
        hm8 = new javax.swing.JLabel();
        hm9 = new javax.swing.JLabel();
        hm10 = new javax.swing.JLabel();
        hm11 = new javax.swing.JLabel();
        hm12 = new javax.swing.JLabel();
        hm13 = new javax.swing.JLabel();
        hm14 = new javax.swing.JLabel();
        hm15 = new javax.swing.JLabel();
        hm16 = new javax.swing.JLabel();
        memval01 = new javax.swing.JLabel();
        memval02 = new javax.swing.JLabel();
        memval03 = new javax.swing.JLabel();
        memval04 = new javax.swing.JLabel();
        memval05 = new javax.swing.JLabel();
        memval06 = new javax.swing.JLabel();
        memval07 = new javax.swing.JLabel();
        memval08 = new javax.swing.JLabel();
        memval09 = new javax.swing.JLabel();
        memval10 = new javax.swing.JLabel();
        memval11 = new javax.swing.JLabel();
        memval12 = new javax.swing.JLabel();
        memval13 = new javax.swing.JLabel();
        memval14 = new javax.swing.JLabel();
        memval15 = new javax.swing.JLabel();
        memval16 = new javax.swing.JLabel();
        limpa = new javax.swing.JButton();
        memoria1 = new javax.swing.JTextField();
        memoria2 = new javax.swing.JTextField();
        memoria3 = new javax.swing.JTextField();
        memoria4 = new javax.swing.JTextField();
        memoria5 = new javax.swing.JTextField();
        memoria6 = new javax.swing.JTextField();
        memoria7 = new javax.swing.JTextField();
        memoria8 = new javax.swing.JTextField();
        rbmemoi = new javax.swing.JRadioButton();
        cbxpalavra = new javax.swing.JComboBox();
        lblvia = new javax.swing.JLabel();
        memoria9 = new javax.swing.JTextField();
        memoria10 = new javax.swing.JTextField();
        memoria11 = new javax.swing.JTextField();
        memoria12 = new javax.swing.JTextField();
        memoria13 = new javax.swing.JTextField();
        memoria14 = new javax.swing.JTextField();
        memoria15 = new javax.swing.JTextField();
        memoria16 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo1.setText("Colocar os numeros para ver se e miss ou hit");

        titulo2.setText("Vias/ Mapeamento");

        verifica.setText("verificar");
        verifica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificaActionPerformed(evt);
            }
        });

        cbxacesso.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 -  Direto", "2 - Associativo por 4 conjuntos", "4 - Associativo por 2 conjuntos", "8 - Totalmente associativo" }));
        cbxacesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxacessoActionPerformed(evt);
            }
        });

        hm1.setToolTipText("");

        hm2.setToolTipText("");

        hm3.setToolTipText("");

        hm4.setToolTipText("");

        hm5.setToolTipText("");

        hm6.setToolTipText("");

        hm7.setToolTipText("");

        hm8.setToolTipText("");

        hm9.setToolTipText("");

        hm10.setToolTipText("");

        hm11.setToolTipText("");

        hm12.setToolTipText("");

        hm13.setToolTipText("");

        hm14.setToolTipText("");

        hm15.setToolTipText("");

        hm16.setToolTipText("");

        limpa.setText("limpar");
        limpa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpaActionPerformed(evt);
            }
        });

        memoria1.setEditable(false);

        memoria2.setEditable(false);

        memoria3.setEditable(false);

        memoria4.setEditable(false);

        memoria5.setEditable(false);

        memoria6.setEditable(false);

        memoria7.setEditable(false);

        memoria8.setEditable(false);

        rbmemoi.setText(" valor de memoria inicial");
        rbmemoi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbmemoiItemStateChanged(evt);
            }
        });
        rbmemoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbmemoiActionPerformed(evt);
            }
        });

        cbxpalavra.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "64" }));
        cbxpalavra.setEnabled(false);
        cbxpalavra.setInheritsPopupMenu(true);
        cbxpalavra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxpalavraActionPerformed(evt);
            }
        });

        lblvia.setText("Quantas palavras tem na memoria");
        lblvia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        memoria9.setEditable(false);

        memoria10.setEditable(false);

        memoria11.setEditable(false);

        memoria12.setEditable(false);

        memoria13.setEditable(false);

        memoria14.setEditable(false);

        memoria15.setEditable(false);

        memoria16.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(entrada01, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(hm1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(memval01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(titulo1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(entrada02, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrada03, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(hm2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hm3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(hm4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hm5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hm6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(entrada04, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrada05, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrada06, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(entrada07, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrada08, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(entrada09, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(hm7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hm8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hm9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(memval02, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval03, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval04, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval05, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval06, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval07, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval08, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(memval09, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(117, 117, 117)
                                        .addComponent(verifica, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(entrada10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(entrada11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(entrada12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(hm10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(hm11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(hm12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(entrada13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addGap(6, 6, 6)
                                                            .addComponent(hm13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(memval10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(memval11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(memval12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(memval13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(limpa, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(entrada14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(memval14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(hm14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(hm15, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(entrada15, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(memval15, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(hm16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(entrada16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(memval16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(memoria1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(memoria5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(memoria9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria11, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(memoria13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria15, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(memoria16, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(rbmemoi, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxacesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titulo2))
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxpalavra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblvia))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(titulo1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(entrada01)
                    .addComponent(entrada02)
                    .addComponent(entrada03)
                    .addComponent(entrada04)
                    .addComponent(entrada05)
                    .addComponent(entrada06)
                    .addComponent(entrada07)
                    .addComponent(entrada08)
                    .addComponent(entrada09)
                    .addComponent(entrada10)
                    .addComponent(entrada11)
                    .addComponent(entrada12)
                    .addComponent(entrada13)
                    .addComponent(entrada14)
                    .addComponent(entrada15)
                    .addComponent(entrada16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hm7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hm8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hm9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hm10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(hm1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hm11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memval01, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval02, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval03, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval04, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval05, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval06, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval07, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval08, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval09, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memval16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(titulo2)
                            .addComponent(lblvia, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxacesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxpalavra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(rbmemoi)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memoria1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memoria5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memoria9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memoria13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memoria16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verifica)
                    .addComponent(limpa))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpaActionPerformed
//  limpa os dados da tela :
        { 
        entrada01.setText("");
        entrada02.setText("");
        entrada03.setText("");
        entrada04.setText("");
        entrada05.setText("");
        entrada06.setText("");
        entrada07.setText("");
        entrada08.setText("");
        entrada09.setText("");
        entrada10.setText("");
        entrada11.setText("");
        entrada12.setText("");
        entrada13.setText("");
        entrada14.setText("");
        entrada15.setText("");
        entrada16.setText("");
            memoria1.setEditable(false);
            memoria2.setEditable(false);
            memoria3.setEditable(false);
            memoria4.setEditable(false);
            memoria5.setEditable(false);
            memoria6.setEditable(false);
            memoria7.setEditable(false);
            memoria8.setEditable(false);
            memoria9.setEditable(false);
            memoria10.setEditable(false);
            memoria11.setEditable(false);
            memoria12.setEditable(false);
            memoria13.setEditable(false);
            memoria14.setEditable(false);
            memoria15.setEditable(false);
            memoria16.setEditable(false);
            rbmemoi.setSelected(false);
            memoria1.setText(null);
            memoria2.setText(null);
            memoria3.setText(null);
            memoria4.setText(null);
            memoria5.setText(null);
            memoria6.setText(null);
            memoria7.setText(null);
            memoria8.setText(null);
            memoria9.setText(null);
            memoria10.setText(null);
            memoria11.setText(null);
            memoria12.setText(null);
            memoria13.setText(null);
            memoria14.setText(null);
            memoria15.setText(null);
            memoria16.setText(null);
             hm1.setText(null);
         hm2.setText(null);
         hm3.setText(null);
         hm4.setText(null);
         hm5.setText(null);
         hm6.setText(null);
         hm7.setText(null);
         hm8.setText(null);
         hm9.setText(null);
         hm10.setText(null); 
         hm11.setText(null);
         hm12.setText(null);
         hm13.setText(null);
         hm14.setText(null);
         hm15.setText(null);
         hm16.setText(null);
         memval01.setText(null);
         memval02.setText(null);
         memval03.setText(null);
         memval04.setText(null);
         memval05.setText(null);
         memval06.setText(null);
         memval07.setText(null);
         memval08.setText(null);
         memval09.setText(null);
         memval10.setText(null); 
         memval11.setText(null);
         memval12.setText(null);
         memval13.setText(null);
         memval14.setText(null);
         memval15.setText(null);
         memval16.setText(null);   
        
                
    }
    }//GEN-LAST:event_limpaActionPerformed

    private void rbmemoiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbmemoiItemStateChanged
        // ativa editar os dados da memoria.
        {
        
                      
    }
    }//GEN-LAST:event_rbmemoiItemStateChanged

    private void rbmemoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbmemoiActionPerformed
        // TODO add your handling code here:
        
         if (!rbmemoi.isSelected()) {
            memoria1.setEditable(false);
            memoria2.setEditable(false);
            memoria3.setEditable(false);
            memoria4.setEditable(false);
            memoria5.setEditable(false);
            memoria6.setEditable(false);
            memoria7.setEditable(false);
            memoria8.setEditable(false);
            memoria9.setEditable(false);
            memoria10.setEditable(false);
            memoria11.setEditable(false);
            memoria12.setEditable(false);
            memoria13.setEditable(false);
            memoria14.setEditable(false);
            memoria15.setEditable(false);
            memoria16.setEditable(false);
            memoria1.setText(null);
            memoria2.setText(null);
            memoria3.setText(null);
            memoria4.setText(null);
            memoria5.setText(null);
            memoria6.setText(null);
            memoria7.setText(null);
            memoria8.setText(null);
            memoria9.setText(null);
            memoria10.setText(null);
            memoria11.setText(null);
            memoria12.setText(null);
            memoria13.setText(null);
            memoria14.setText(null);
            memoria15.setText(null);
            memoria16.setText(null);
          
            
        } else {
            
            memoria1.setEditable(true);
            memoria2.setEditable(true);
            memoria3.setEditable(true);
            memoria4.setEditable(true);
            memoria5.setEditable(true);
            memoria6.setEditable(true);
            memoria7.setEditable(true);
            memoria8.setEditable(true);
            memoria9.setEditable(true);
            memoria10.setEditable(true);
            memoria11.setEditable(true);
            memoria12.setEditable(true);
            memoria13.setEditable(true);
            memoria14.setEditable(true);
            memoria15.setEditable(true);
            memoria16.setEditable(true);
        }
       
        
    }//GEN-LAST:event_rbmemoiActionPerformed

    private void verificaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificaActionPerformed
            
            int cb = cbxacesso.getSelectedIndex();
            int c = 2;
            int ti;
           String[] pal = {"4","8","16","32","64","96","128","256","512","1M","2M","3M"};
           String[] pal2 = {"16","32","64","96","128","256","512","1M","2M","3M"}; 
            int[] vpal = {4,8,16,32,64,96,128,256,512,1024,2048,3072};
            int[] vpal2 = {16,32,64,96,128,256,512,1024,2048,3072};
      
         int ecache [] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,};
         
               switch( cb )
        {
            case 1: 
            ti = 2;
            for (int p = 0; p < 10; p++){
          cbxpalavra.addItem(pal2[p]);
                            
        }
            
            break;
            case 2: 
            ti = 4;
            for (int p = 0; p < 10; p++){
          cbxpalavra.addItem(pal2[p]);
                            
        }
             
                break;
            case 3: 
            ti = 8;
               for (int p = 0; p < 12; p++){
          cbxpalavra.addItem(pal[p]);
                            
        }
                break;
            default:
            ti = 1; 
            for (int p = 0; p < 12; p++){
          cbxpalavra.addItem(pal[p]);
                            
        }
    }
               
            int def = 64;
            int tiv = cbxpalavra.getSelectedIndex();
            if (ti==2 || ti==4){
              def =  vpal2[tiv];
              if (ti==2&& def == 16){
               def = 32;   
              }
               }else{
                def = vpal[tiv];
            }
            
            int tip[] = new int [def];
            // definição de conunto 2 ou 4
            if (ti==2){
                c = def/4;
            }
            if (ti==4){
                c = def/2;
            }
            //
            int memo[][] = new int [def][c];
            int mcache[][] = new int [def][c];
            int ent[];
            ent = new int [16];
            String hm [];
            String sm [];
            hm = new String [16];
            sm = new String [16];
            int r;
            int l;
            l = 0;   
         
           
           
        //verifica e carrega os valores da memoria:
         if ((entrada01.getText().length() < 1) 
            &&(entrada02.getText().length() < 1)
                &&(entrada03.getText().length() < 1)
                &&(entrada04.getText().length() < 1)
                &&(entrada05.getText().length() < 1)
                &&(entrada06.getText().length() < 1)
                &&(entrada07.getText().length() < 1)
                &&(entrada08.getText().length() < 1)
                &&(entrada09.getText().length() < 1)
                &&(entrada10.getText().length() < 1)
                &&(entrada11.getText().length() < 1)
                &&(entrada12.getText().length() < 1)
                &&(entrada13.getText().length() < 1)
                &&(entrada14.getText().length() < 1)
                &&(entrada15.getText().length() < 1) 
                &&(entrada16.getText().length() < 1)
                 
                ) {
            JOptionPane.showMessageDialog(null, "favor colocar numeros!!");
              
        } 
         
         if ((entrada01.getText().length() > 0)
            &&(entrada01.getText().matches("[0-9]*"))){
             ent[0] = Integer.parseInt(entrada01.getText());    
            }
           else
            {
            ent[0] = -1;
            }
           if ((entrada02.getText().length() > 0)
            &&(entrada02.getText().matches("[0-9]*"))){
             ent[1] = Integer.parseInt(entrada02.getText());    
            }
           else
            {
            ent[1] = -1;
            }
           if ((entrada03.getText().length() > 0)
            &&(entrada03.getText().matches("[0-9]*"))){
             ent[2] = Integer.parseInt(entrada03.getText());    
            }
           else
            {
            ent[2] = -1;
            }
           if ((entrada04.getText().length() > 0)
            &&(entrada04.getText().matches("[0-9]*"))){
             ent[3] = Integer.parseInt(entrada04.getText());    
            }
           else
            {
            ent[3] = -1;
            }
            if ((entrada05.getText().length() > 0)
            &&(entrada05.getText().matches("[0-9]*"))){
             ent[4] = Integer.parseInt(entrada05.getText());    
            }
           else
            {
            ent[4] = -1;
            }
           if ((entrada06.getText().length() > 0)
            &&(entrada06.getText().matches("[0-9]*"))){
             ent[5] = Integer.parseInt(entrada06.getText());    
            }
           else
            {
            ent[5] = -1;
            }
           if ((entrada07.getText().length() > 0)
            &&(entrada07.getText().matches("[0-9]*"))){
             ent[6] = Integer.parseInt(entrada07.getText());    
            }
           else
            {
            ent[6] = -1;
            }
           if ((entrada08.getText().length() > 0)
            &&(entrada08.getText().matches("[0-9]*"))){
             ent[7] = Integer.parseInt(entrada08.getText());    
            }
           else
            {
            ent[7] = -1;
            }
           if ((entrada09.getText().length() > 0)
            &&(entrada09.getText().matches("[0-9]*"))){
             ent[8] = Integer.parseInt(entrada09.getText());    
            }
           else
            {
            ent[8] = -1;
            }
           if ((entrada10.getText().length() > 0)
            &&(entrada10.getText().matches("[0-9]*"))){
             ent[9] = Integer.parseInt(entrada10.getText());    
            }
           else
            {
            ent[9] = -1;
            }
           if ((entrada11.getText().length() > 0)
            &&(entrada11.getText().matches("[0-9]*"))){
             ent[10] = Integer.parseInt(entrada11.getText());    
            }
           else
            {
            ent[10] = -1;
            }
           if ((entrada12.getText().length() > 0)
            &&(entrada12.getText().matches("[0-9]*"))){
             ent[11] = Integer.parseInt(entrada12.getText());    
            }
           else
            {
            ent[11] = -1;
            }
            if ((entrada13.getText().length() > 0)
            &&(entrada13.getText().matches("[0-9]*"))){
             ent[12] = Integer.parseInt(entrada13.getText());    
            }
           else
            {
            ent[12] = -1;
            }
           if ((entrada14.getText().length() > 0)
            &&(entrada14.getText().matches("[0-9]*"))){
             ent[13] = Integer.parseInt(entrada14.getText());    
            }
           else
            {
            ent[13] = -1;
            }
           if ((entrada15.getText().length() > 0)
            &&(entrada15.getText().matches("[0-9]*"))){
             ent[14] = Integer.parseInt(entrada15.getText());    
            }
           else
            {
            ent[14] = -1;
            }
           if ((entrada16.getText().length() > 0)
            &&(entrada16.getText().matches("[0-9]*"))){
             ent[15] = Integer.parseInt(entrada16.getText());    
            }
           else
            {
            ent[15] = -1;
            }
// inicio for zerarvalor de memoria
           
           c = 1; 
           for( int col = 0; col < c ; col++){              
           for(int a = 0; a < def ; a++){
               memo[0][col] = -1;
               memo[a][col] = -1;
               tip[0]= 0;
               tip[a] = 0;
           }
           }
           if (rbmemoi.isSelected()) {
           if ((memoria1.getText().length() > 0)
            &&(memoria1.getText().matches("[0-9]*"))){
             ecache[0]  = Integer.parseInt(memoria1.getText());    
            }
           else
            {
            ecache[0]  = -1;
            }
            if ((memoria2.getText().length() > 0)
            &&(memoria2.getText().matches("[0-9]*"))){
             ecache[1] = Integer.parseInt(memoria2.getText());    
            }
           else
            {
            ecache[1] = -1;
            }
           if ((memoria3.getText().length() > 0)
            &&(memoria3.getText().matches("[0-9]*"))){
             ecache[2] = Integer.parseInt(memoria3.getText());    
            }
           else
            {
            ecache[2] = -1;
            }
           if ((memoria4.getText().length() > 0)
            &&(memoria4.getText().matches("[0-9]*"))){
             ecache[3] = Integer.parseInt(memoria4.getText());    
            }
           else
            {
            ecache[3] = -1;
            }
           if (def > 4){
            if ((memoria5.getText().length() > 0)
            &&(memoria5.getText().matches("[0-9]*"))){
             ecache[4] = Integer.parseInt(memoria5.getText());    
            }
           else
            {
            ecache[4] = -1;
            }
           if ((memoria6.getText().length() > 0)
            &&(memoria6.getText().matches("[0-9]*"))){
             ecache[5] = Integer.parseInt(memoria6.getText());    
            }
           else
            {
            ecache[5] = -1;
            }
           if ((memoria7.getText().length() > 0)
            &&(memoria7.getText().matches("[0-9]*"))){
             ecache[6] = Integer.parseInt(memoria7.getText());    
            }
           else
            {
            ecache[6] = -1;
            }
           if ((memoria8.getText().length() > 0)
            &&(memoria8.getText().matches("[0-9]*"))){
             ecache[7] = Integer.parseInt(memoria8.getText());    
            }
           else
            {
            ecache[7] = -1;
            }
            if (def > 8){
           if ((memoria9.getText().length() > 0)
            &&(memoria9.getText().matches("[0-9]*"))){
             ecache[8] = Integer.parseInt(memoria9.getText());    
            }
           else
            {
            ecache[8] = -1;
            }
             if ((memoria10.getText().length() > 0)
            &&(memoria10.getText().matches("[0-9]*"))){
             ecache[9] = Integer.parseInt(memoria10.getText());    
            }
           else
            {
            ecache[9] = -1;
            }
           if ((memoria11.getText().length() > 0)
            &&(memoria11.getText().matches("[0-9]*"))){
             ecache[10] = Integer.parseInt(memoria11.getText());    
            }
           else
            {
            ecache[10] = -1;
            }
           if ((memoria12.getText().length() > 0)
            &&(memoria12.getText().matches("[0-9]*"))){
             ecache[11] = Integer.parseInt(memoria12.getText());    
            }
           else
            {
            ecache[11] = -1;
            }
            if ((memoria13.getText().length() > 0)
            &&(memoria13.getText().matches("[0-9]*"))){
             ecache[12] = Integer.parseInt(memoria13.getText());    
            }
           else
            {
            ecache[12] = -1;
            }
           if ((memoria14.getText().length() > 0)
            &&(memoria14.getText().matches("[0-9]*"))){
             ecache[13] = Integer.parseInt(memoria14.getText());    
            }
           else
            {
            ecache[13] = -1;
            }
           if ((memoria15.getText().length() > 0)
            &&(memoria15.getText().matches("[0-9]*"))){
             ecache[14] = Integer.parseInt(memoria15.getText());    
            }
           else
            {
            ecache[14] = -1;
            }
           if ((memoria16.getText().length() > 0)
            &&(memoria16.getText().matches("[0-9]*"))){
             ecache[15] = Integer.parseInt(memoria16.getText());    
            }
           else
            {
            ecache[15] = -1;
            }

               
           }
           }      
             
              
               c = 1; 
                
           for( int col = 0; col < c ; col++){              
           for(int a = 0; a < def ; a++){
               mcache[0][col]=-1;
              mcache[a][col] = -1;
              tip[0]=0;
               tip[a] = 0;
           }
           }
           // fim do zera memoria
           //teste associativa
           if (ti == 8){
               def = def ;
               int a = 0;
               int av = a + 1;
           for(int i = 0; i < def ; i++){ 
               
               if (ecache[i] > -1){                   
                for (int a1 = 0 ;a1 < av; a1++){
                 if (mcache[a1][0] == ecache[i]){
                   hm[i] = "hit";
                String m1 = String.valueOf(mcache[a1][0]); 
                sm[i] = m1;   
                 } 
                   }               
               if (mcache[a][0]== -1 && hm[i] != "hit" ){
                   mcache[a][0] = ecache[i];
                   sm[i] = "?";             
                   hm[i] = "miss";
                  
               }else{
                 int i1 = i+1;
                 if (hm[i] != "hit" && hm[i1] != "hit"){
                     mcache[a][0] = ecache[i];
                    hm[i] = "miss";
                    String m1 = String.valueOf(mcache[a][c]); 
                sm[i] = m1; 
               
                 }else{
                   if (hm[i] != "hit" && hm[i1] == "hit") {
                       if (a < def){
                        a = a+1;
                        av = a;
                        }else{
                        a = 0;
                         av = def ;
                        }
                    mcache[a][0] = ecache[i];
                    hm[i] = "miss";
                    String m1 = String.valueOf(mcache[a][c]); 
                    sm[i] = m1;    
                   } 
                 }                  
               }
               
               if (a < def){
                   a = a+1;
                   av = a;
               }else{
                   a = 0;
                   av = def  ;
               }
           } 
           
           }    
           // fim associativa    
           }else{
            // inicio do for de teste valor
           if (ti == 2){
               def = 32;               
           }
           if (ti == 4){
               def = 16;               
           }
           for(int i = 0; i < 16 ; i++){
                int e1 = ecache[i];
             if (e1 > -1){
                r = e1 / def;
                int a = e1 - (def * r);
                c = tip[a];
                int v = mcache[a][c];
            if ( ecache[i] == mcache[a][c]){
                
                hm[i] = "hit";
                String m1 = String.valueOf(mcache[a][c]); 
                sm[i] = m1;
                        
    } else {  
           if ( v < 0){ 
           
            sm[i] = "?";
           
            hm[i] = "miss";
            mcache[a][c] = e1;
            if (ti == 2){
                a =  a/4;
                a = 4 * a;
                e1 = e1/4;
                e1 = 4 * e1;
                for (int p = 0; p < 4; p++){                              
                mcache[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
            }
            if (ti == 4){
                a = a/2;
                a = 2 * a;
                e1 = e1/2;
                e1 = 2 * e1;
                for (int p = 0; p < 2; p++){                              
                mcache[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
            }
    } else{
           
            hm[i] = "miss";
            String m1 = String.valueOf(mcache[a][c]); 
            sm[i] = m1;
                      
            mcache[a][c] = e1;
            // testa associativa de 2 e 4 conjuntos
            if (ti == 2){
                a =  a/4;
                a = 4 * a;
                e1 = e1/4;
                e1 = 4 * e1;
                for (int p = 0; p < 4; p++){                              
                mcache[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
            }
            if (ti == 4){
                a = a/2;
                a = 2 * a;
                e1 = e1/2;
                e1 = 2 * e1;
                for (int p = 0; p < 2; p++){                              
                mcache[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
            }
            }
        }
            }   
           }
           
}
        
}
      memo = mcache;      
         
           }
           // fim do zera memoria
           //teste associativa
           if (ti == 8){
               def = vpal[tiv];
               def = def ;
               int a = 0;
               int av = a;
                if (rbmemoi.isSelected()) {
                    av = def;
                }              
           for(int i = 0; i < 16 ; i++){ 
               
               if (ent[i] > -1){                   
                for (int a1 = 0 ; a1 < av; a1++){
                    int v = memo[a1][0];
                    int e = ent[i];
                 if ( v == e){
                   hm[i] = "hit";
                String m1 = String.valueOf(memo[a1][0]); 
                sm[i] = m1;   
                 } 
                   } 
                if (a == def){
                    a = 0;
                }
               if (memo[a][0]== -1 && hm[i] != "hit" ){
                   memo[a][0] = ent[i];
                   sm[i] = "?";             
                   hm[i] = "miss";
                  
               }else{
                 int i1 = i+1;
                 if (hm[i] != "hit" && hm[i1] != "hit"){
                    hm[i] = "miss";
                    String m1 = String.valueOf(memo[a][0]);
                     memo[a][0] = ent[i];
                sm[i] = m1; 
               
                 }else{
                   if (hm[i] != "hit" && hm[i1] == "hit") {
                       if (a < def){
                        a = a+1;
                       if (rbmemoi.isSelected()) {
                         av = def;
                         } else {
                       av = a+1;    
                       } 
                        
                        }else{
                        a = 0;
                         av = def  ;
                        }
                    
                    hm[i] = "miss";
                    String m1 = String.valueOf(memo[a][0]); 
                    memo[a][0] = ent[i];
                    sm[i] = m1;    
                   } 
                 }                  
               }
               
               if (a < def){
                   a = a+1;
                  if (rbmemoi.isSelected()) {
                         av = def;
                         } else {
                       av = a+1;    
                       } 
               }else{
                   a = 0;                   
                   av = def  ;
               }
           } 
           
           }    
           // fim associativa    
           }else{
            // inicio do for de teste valor
           if (ti == 2){
               def = 32;               
           }
           if (ti == 4){
               def = 16;               
           }
           // direta
           for(int i = 0; i < 16 ; i++){
                int e1 = ent[i];
             if (e1 > -1){
                r = e1 / def;
                int a = e1 - (def * r);
                //c = tip[a];
                c = 0;
                int v = memo[a][c];
            if ( ent[i] == memo[a][c]){
                hm1.setText("hit");
                hm[i] = "hit";
                String m1 = String.valueOf(memo[a][c]); 
                sm[i] = m1;
                // memval01.setText(m1);         
    } else {  
           if ( v < 0){ 
           // memval01.setText("?");
            sm[i] = "?";
            hm1.setText("miss");
            hm[i] = "miss";
            memo[a][c] = e1;
            if (ti == 2){
                a =  a/4;
                a = 4 * a;
                e1 = e1/4;
                e1 = 4 * e1;
                for (int p = 0; p < 4; p++){                              
                memo[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
                // fim direta
            }
            if (ti == 4){
                a = a/2;
                a = 2 * a;
                e1 = e1/2;
                e1 = 2 * e1;
                for (int p = 0; p < 2; p++){                              
                memo[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
            }
    } else{
            hm1.setText("miss");
            hm[i] = "miss";
            String m1 = String.valueOf(memo[a][c]); 
            sm[i] = m1;
            memval01.setText(m1);            
            memo[a][c] = e1;
            // testa associativa de 2 e 4 conjuntos
            if (ti == 2){
                a =  a/4;
                a = 4 * a;
                e1 = e1/4;
                e1 = 4 * e1;
                for (int p = 0; p < 4; p++){                              
                memo[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
                }
            }
            if (ti == 4){
                a = a/2;
                a = 2 * a;
                e1 = e1/2;
                e1 = 2 * e1;
                for (int p = 0; p < 2; p++){                              
                memo[a][c] = e1; 
                e1 = e1 + 1;
                a = a + 1;
            }
            }
        }
            }   
           }
           }
             //fim for
           } 
           // carrega os dados do array nos objetos
         hm1.setText(hm[0]);
         hm2.setText(hm[1]);
         hm3.setText(hm[2]);
         hm4.setText(hm[3]);
         hm5.setText(hm[4]);
         hm6.setText(hm[5]);
         hm7.setText(hm[6]);
         hm8.setText(hm[7]);
         hm9.setText(hm[8]);
         hm10.setText(hm[9]); 
         hm11.setText(hm[10]);
         hm12.setText(hm[11]);
         hm13.setText(hm[12]);
         hm14.setText(hm[13]);
         hm15.setText(hm[14]);
         hm16.setText(hm[15]);
         memval01.setText(sm[0]);
         memval02.setText(sm[1]);
         memval03.setText(sm[2]);
         memval04.setText(sm[3]);
         memval05.setText(sm[4]);
         memval06.setText(sm[5]);
         memval07.setText(sm[6]);
         memval08.setText(sm[7]);
         memval09.setText(sm[8]);
         memval10.setText(sm[9]); 
         memval11.setText(sm[10]);
         memval12.setText(sm[11]);
         memval13.setText(sm[12]);
         memval14.setText(sm[13]);
         memval15.setText(sm[14]);
         memval16.setText(sm[15]);

         
            
    }//GEN-LAST:event_verificaActionPerformed

    private void cbxpalavraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxpalavraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxpalavraActionPerformed

    private void cbxacessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxacessoActionPerformed

        
           
        
        int cb = cbxacesso.getSelectedIndex();
          cbxpalavra.setEnabled(true);
                    
           String[] pal = {"4","8","16","32","64","96","128","256","512","1M","2M","3M"};
           String[] pal2 = {"16","32","64","96","128","256","512","1M","2M","3M"}; 
                        
               switch( cb )
        {
            case 1: 
            cbxpalavra.removeAllItems();
            for (int p = 0; p < 10; p++){
          cbxpalavra.addItem(pal2[p]);
                            
        }
            
            break;
            case 2: 
          cbxpalavra.removeAllItems();
            for (int p = 0; p < 10; p++){
          cbxpalavra.addItem(pal2[p]);
                            
        }
             
                break;
            case 3: 
         cbxpalavra.removeAllItems();
               for (int p = 0; p < 12; p++){
          cbxpalavra.addItem(pal[p]);
                            
        }
                break;
            default:
          cbxpalavra.removeAllItems();
            for (int p = 0; p < 12; p++){
          cbxpalavra.addItem(pal[p]);
                            
        }
    }
              
    }//GEN-LAST:event_cbxacessoActionPerformed
private void rbmemoi(actionEvent evt){
    
    
        if (rbmemoi.isSelected()) {
            memoria1.setEditable(false);
            memoria2.setEditable(false);
            memoria3.setEditable(false);
            memoria4.setEditable(false);
            memoria5.setEditable(false);
            memoria6.setEditable(false);
            memoria7.setEditable(false);
            memoria8.setEditable(false);
        } else {
            
            memoria1.setEditable(true);
            memoria2.setEditable(true);
            memoria3.setEditable(true);
            memoria4.setEditable(true);
            memoria5.setEditable(true);
            memoria6.setEditable(true);
            memoria7.setEditable(true);
            memoria8.setEditable(true);
        }
       
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hit_miss_penalty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Hit_miss_penalty().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbxacesso;
    private javax.swing.JComboBox cbxpalavra;
    private javax.swing.JTextField entrada01;
    private javax.swing.JTextField entrada02;
    private javax.swing.JTextField entrada03;
    private javax.swing.JTextField entrada04;
    private javax.swing.JTextField entrada05;
    private javax.swing.JTextField entrada06;
    private javax.swing.JTextField entrada07;
    private javax.swing.JTextField entrada08;
    private javax.swing.JTextField entrada09;
    private javax.swing.JTextField entrada10;
    private javax.swing.JTextField entrada11;
    private javax.swing.JTextField entrada12;
    private javax.swing.JTextField entrada13;
    private javax.swing.JTextField entrada14;
    private javax.swing.JTextField entrada15;
    private javax.swing.JTextField entrada16;
    private javax.swing.JLabel hm1;
    private javax.swing.JLabel hm10;
    private javax.swing.JLabel hm11;
    private javax.swing.JLabel hm12;
    private javax.swing.JLabel hm13;
    private javax.swing.JLabel hm14;
    private javax.swing.JLabel hm15;
    private javax.swing.JLabel hm16;
    private javax.swing.JLabel hm2;
    private javax.swing.JLabel hm3;
    private javax.swing.JLabel hm4;
    private javax.swing.JLabel hm5;
    private javax.swing.JLabel hm6;
    private javax.swing.JLabel hm7;
    private javax.swing.JLabel hm8;
    private javax.swing.JLabel hm9;
    private javax.swing.JLabel lblvia;
    private javax.swing.JButton limpa;
    private javax.swing.JTextField memoria1;
    private javax.swing.JTextField memoria10;
    private javax.swing.JTextField memoria11;
    private javax.swing.JTextField memoria12;
    private javax.swing.JTextField memoria13;
    private javax.swing.JTextField memoria14;
    private javax.swing.JTextField memoria15;
    private javax.swing.JTextField memoria16;
    private javax.swing.JTextField memoria2;
    private javax.swing.JTextField memoria3;
    private javax.swing.JTextField memoria4;
    private javax.swing.JTextField memoria5;
    private javax.swing.JTextField memoria6;
    private javax.swing.JTextField memoria7;
    private javax.swing.JTextField memoria8;
    private javax.swing.JTextField memoria9;
    private javax.swing.JLabel memval01;
    private javax.swing.JLabel memval02;
    private javax.swing.JLabel memval03;
    private javax.swing.JLabel memval04;
    private javax.swing.JLabel memval05;
    private javax.swing.JLabel memval06;
    private javax.swing.JLabel memval07;
    private javax.swing.JLabel memval08;
    private javax.swing.JLabel memval09;
    private javax.swing.JLabel memval10;
    private javax.swing.JLabel memval11;
    private javax.swing.JLabel memval12;
    private javax.swing.JLabel memval13;
    private javax.swing.JLabel memval14;
    private javax.swing.JLabel memval15;
    private javax.swing.JLabel memval16;
    private javax.swing.JRadioButton rbmemoi;
    private javax.swing.JLabel titulo1;
    private javax.swing.JLabel titulo2;
    private javax.swing.JButton verifica;
    // End of variables declaration//GEN-END:variables

    private void cache(String[] ecache1) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private static class actionEvent {

        public actionEvent() {
        }
    }
}
